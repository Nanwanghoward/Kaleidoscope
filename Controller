# java
Kaleidoscope

package kaleidoscope;


import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.Timer;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

import kaleidoscope.Model.Strobe;

/**
 * The Controller sets up the GUI and handles all the controls (buttons,
 * menu items, etc.)
 * 
 * @author Nan Wang
 */
public class Controller extends JFrame {
    JPanel buttonPanel = new JPanel();
    JButton runButton = new JButton("Run");
    JButton stopButton = new JButton("Stop");
    JButton addButton = new JButton("Add");
    JButton removeButton = new JButton("Remove");
    JButton speedUpButton = new JButton("SpeedUp");
    JButton slowDownButton = new JButton("SlowDown");
    JButton colorButton = new JButton("changeColor");
    JButton clearButton = new JButton("Clear");
    
    JButton resetButton = new JButton("Reset");
    JButton directionButton = new JButton("changeDirection");

    /** The Model is the object that does all the computations. It is
     * completely independent of the Controller and View objects. */
    Model model;
    
    /** The View object displays what is happening in the Model. */
    View view;
    public int speed = 40;
    
    /**
     * Runs the bouncing ball program.
     * @param args Ignored.
     */
    public static void main(String[] args) {
        Controller c = new Controller();
        c.init();
        c.display();
    }

    /**
     * Sets up communication between the components.
     */
    private void init() {
        model = new Model();     // The model is independent from the other classes
        view = new View(model);  // The view needs to know what model to look at
        model.addObserver(view); // The model needs to give permission to be observed
    }

    /**
     * Displays the GUI.
     */
    private void display() {
        layOutComponents();
        attachListenersToComponents();
        setSize(600, 600);
        setVisible(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    /**
     * Arranges the various components in the GUI.
     */
    private void layOutComponents() {
        setLayout(new BorderLayout());
        this.add(BorderLayout.SOUTH, buttonPanel);
        buttonPanel.setLayout(new GridLayout(3, 4));
        buttonPanel.add(runButton);
        buttonPanel.add(stopButton);
        buttonPanel.add(addButton);
        buttonPanel.add(removeButton);
        buttonPanel.add(speedUpButton);
        buttonPanel.add(slowDownButton);
        buttonPanel.add(colorButton);
        buttonPanel.add(clearButton);
        buttonPanel.add(resetButton);
        buttonPanel.add(directionButton);
        stopButton.setEnabled(false);
        speedUpButton.setEnabled(false);
    	slowDownButton.setEnabled(false);
    	directionButton.setEnabled(false);
        this.add(BorderLayout.CENTER, view);
    }
    
    /**
     * Attaches listeners to the components, and schedules a Timer.
     */
    private void attachListenersToComponents() {
        // The Run button tells the Model to start
        runButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                runButton.setEnabled(false);
                stopButton.setEnabled(true);
                speedUpButton.setEnabled(true);
            	slowDownButton.setEnabled(true);
            	directionButton.setEnabled(true);
                model.start();
            }
        });
        // The Stop button tells the Model to pause
        stopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                runButton.setEnabled(true);
                stopButton.setEnabled(false);
                model.pause();
            }
        });
     // The Add button tells the Model to add a figure
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
            	if (model.shape().size() >= 11)
            		addButton.setEnabled(false);
                model.addshape();
                model.setLimits(view.getWidth(), view.getWidth());  // critical syntax because the constructor of Shape.class doesn't give the Xlimit and Ylimit to the instance variables
                view.repaint();
                removeButton.setEnabled(true);
                clearButton.setEnabled(true);
            	colorButton.setEnabled(true);
            }
        });
        
        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                model.removeshape();
                view.repaint();
                addButton.setEnabled(true);
                if(model.shape().size() == 0){
                	removeButton.setEnabled(false);
                	clearButton.setEnabled(false);
                }
            }
        });
        
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
            	model.removeall();
            	view.repaint();
            	clearButton.setEnabled(false);
            	removeButton.setEnabled(false);
            	addButton.setEnabled(true);
            	colorButton.setEnabled(false);
            	speedUpButton.setEnabled(false);
            	slowDownButton.setEnabled(false);
            	directionButton.setEnabled(false);
            } 
        });
        speedUpButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
            	model.speedUp();
            }
        });
        slowDownButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
            	model.slowDown();
            }
        });
        
        colorButton.addActionListener(new ActionListener(){
        	@Override
        	public  void actionPerformed(ActionEvent event){
        		model.changeColor();
        		view.repaint();
        	}
        });
        
        directionButton.addActionListener(new ActionListener(){
        	@Override
        	public void actionPerformed(ActionEvent event){
        		model.changeDirection();
        	}
        });
        
        resetButton.addActionListener(new ActionListener(){
        	@Override
        	public void actionPerformed(ActionEvent event){
        		model.reset();
        		model.setLimits(view.getWidth(), view.getWidth());  // critical syntax because the constructor of Shape.class doesn't give the Xlimit and Ylimit to the instance variables
                view.repaint();
                runButton.setEnabled(true);
                stopButton.setEnabled(false);
                clearButton.setEnabled(true);
            	removeButton.setEnabled(true);
            	addButton.setEnabled(true);
            	speedUpButton.setEnabled(false);
            	slowDownButton.setEnabled(false);
            	colorButton.setEnabled(true);
            	directionButton.setEnabled(false);
        	}
        });
        // When the window is resized, the Model is given the new limits
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent arg0) {
                model.setLimits(view.getWidth(), view.getHeight());
            }
        });
    }


}
